import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shoe_store/data/repository/search_product_repository.dart';
import 'package:shoe_store/shared/cubits/search_cubit/search_state.dart';
import 'package:shoe_store/shared/models/product.dart'; // ‚úÖ Th√™m import

class SearchCubit extends Cubit<SearchState> {
  final SearchProductRepository searchProductRepository;
  SearchCubit({required this.searchProductRepository}) : super(SearchState());

  Future<void> searchProducts(String query) async {
    print("üîÑ [SearchCubit] - ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi t·ª´ kh√≥a: $query");
    emit(state.copyWith(isLoading: true, searchResults: []));

    try {
      final List<Product> results = await searchProductRepository.searchProducts(query);
      if (results.isNotEmpty) {
        
        print("‚úÖ [SearchCubit] - T√¨m th·∫•y ${results.length} s·∫£n ph·∫©m: $results");
        emit(state.copyWith(isLoading: false, searchResults: results));
      } else {
        print("‚ùå [SearchCubit] - Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o!");
        emit(state.copyWith(
          isLoading: false,
          searchResults: [],
          errorMessage: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o!',
        ));
      }
    } catch (e) {
      print("‚ùå [SearchCubit] - L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m: $e");
      emit(state.copyWith(
        isLoading: false,
        errorMessage: e.toString(),
      ));
    }
  }
}
